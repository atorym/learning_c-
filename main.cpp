/*
Тест
Задание №1
 Напишите прототипы функций для следующих случаев. Используйте const при необходимости.
 a) Функция с именем max(), которая принимает два значения типа double и возвращает большее из них.
 b) Функция swap(), которая меняет местами два целых числа.
 c) Функция getLargestElement(), которая принимает динамически выделенный массив целых чисел и
 возвращает наибольшее число таким образом, что caller может изменить значение возвращаемого
 элемента (не забудьте о параметре-длине).
*/

#include <cstdint>
#include <iostream>
#include <vector>

//a)
const double& max(const double&, const double&);
//b)
void swap(int&, int&);
//c)

std::size_t return_value = 0;
std::size_t get_largest_element(const std::vector<std::size_t>& array, size_t& size, std::size_t& return_value);


int main() {


  return EXIT_SUCCESS;
}

/*Задание №2
Что не так со следующими программами?
a)--------------------------------------------------------------------------------
 int& doSomething()
 {
 int array[] = { 1, 3, 5, 7, 9 };
 return array[2];
 }
----------------------------------------------------------------------------------
После завершения функции массив и его значения удаляются. А тип возвращаемого значения int&.
Следовательно ссылка будет указывать на мусор.
Чтобы исправить, нужно продлить время жизни массива. Допустим добавив static.
b)--------------------------------------------------------------------------------
 int sumTo(int value)
 {
 return value + sumTo(value - 1);
 }
----------------------------------------------------------------------------------
Бесконечная рекурсия, нет выхода.
c)--------------------------------------------------------------------------------
 float divide(float a, float b)
 {
 return a / b;
 }

 double divide(float a, float b)
 {
 return a / b;
 }
----------------------------------------------------------------------------------
Неправильное использование перегрузки функции. При использовании данного приема
должны различаться аргументы функций. Тип возвращаемого значения не является аргументом.
d)--------------------------------------------------------------------------------
 #include <iostream>

 int main()
 {
 int array[1000000000];

 for (const auto &x: array)
 std::cout << x << ' ';

 return 0;
 }
----------------------------------------------------------------------------------
В массиве слишком много членов. Seg fault.
e)--------------------------------------------------------------------------------
 #include <iostream>

 int main(int argc, char *argv[])
 {

 int times = argv[1];                         -int не может быть равно c-style строке
 for (int count = 0; count < times; count++)
 std::cout << count << ' ';

 return 0;
 }
----------------------------------------------------------------------------------
Что тут блять вообще происходит.
----------------------------------------------------------------------------------
 */